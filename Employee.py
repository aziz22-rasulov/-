import numpy as np
import pickle
import pandas as pd
import streamlit as st
from PIL import Image



st.set_page_config(
    page_title="Employee detection system",
    page_icon='üè¶',
    layout="wide", 
    initial_sidebar_state="expanded",
)
st.subheader('–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ')

model_selected = st.radio('–ö–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?', ('KNeighborsClassifier', 'LogisticRegression', 'DecisionTreeClassifier',  'RandomForestClassifier', 'AdaBoostClassifier', 'XGBClassifier', 'CatBoostClassifier', 'Default'))


if model_selected == 'KNeighborsClassifier':
    pickle_in = open("employee_KNN.pkl","rb")
    classifier=pickle.load(pickle_in)
elif model_selected in ['LogisticRegression', 'Default']:
    pickle_in = open("employee_LogReg.pkl","rb")
    classifier=pickle.load(pickle_in)
elif model_selected == 'DecisionTreeClassifier':
    pickle_in = open("employee_DecisionTree.pkl","rb")
    classifier=pickle.load(pickle_in)
elif model_selected == 'RandomForestClassifier':
    pickle_in = open("employee_RandomForest.pkl","rb")
elif model_selected == 'AdaBoostClassifier':
    pickle_in = open("employee_AdaBoost.pkl","rb")
elif model_selected == 'XGBClassifier':
    pickle_in = open("employee_xgboos.pkl","rb")
elif model_selected == 'CatBoostClassifier':
    pickle_in = open("employee_catboost.pkl","rb")
    classifier=pickle.load(pickle_in)
    
def predict_note_authentication(JoiningYear, PaymentTier, Age, Gender, EverBenched, ExperienceInCurrentDomain, Bachelors, Masters, PHD, Bangalore, New Delhi, Pune):
    prediction=classifier.predict([[AJoiningYear, PaymentTier, Age, Gender, EverBenched, ExperienceInCurrentDomain, Bachelors, Masters, PHD, Bangalore, New Delhi, Pune]])
    print(prediction)
    return prediction 



def main():
    st.title("–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ")
    JoiningYear = st.radio('–í–∞—à –ø–æ–ª?(0 - male, 1 - female)', (0, 1))
    JoiningYear = st.number_input('–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)?', step=1, value=0)
    PaymentTier = st.number_input('—É—Ä–æ–≤–µ–Ω—å –æ–ø–ª–∞—Ç—ã?(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 3)?', step=1, value=0) 
    Age = st.number_input('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)?', step=1, value=0)
    Family_status = st.radio('–ö–∞–∫–æ–≤ –≤–∞—à —Å–µ–º–µ–Ω—ã–π —Å—Ç–∞—Ç—É—Å?(0 - Widow/Widower, 1 - Single, 2 - Married, 3 - Divorced)', (0, 1, 2, 3))
    Type_of_client = st.radio('–ö–∞–∫–æ–π –≤—ã –∫–ª–∏–µ–Ω—Ç?(0 - –°—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç, 1 - –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç)', (0, 1))    
    Education = st.radio('–ö–∞–∫–æ–µ —É –≤–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?(0 - –í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, 1 - –°—Ä–µ–¥.—Å–ø–µ—Ü.–æ–±—Ä–∞–∑-–Ω–∏–µ, 2 - –°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, 3 - –ù–µ–ø–æ–ª –°—Ä–µ–¥.–æ–±—Ä–∞–∑, 4 - –ù–∞—á–∞–ª –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, 5 - –ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞)', (0, 1, 2, 3, 4, 5))
    Tupe_of_business = st.radio('–ö–∞–∫–æ–π —É –≤–∞—Å –≤–∏–¥ –±–∏–∑–Ω–µ—Å–∞?(0 - 1. –ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª–∏/–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç, 1 - 2. –ò—Å—Ç–µ—Ö—Å–æ–ª–æ—Ç/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, 2 - 6. –•–æ—á–∞–≥–∏–∏ –∫–∏—à–ª–æ–∫ / –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ, 3 - 3. –•–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏/–£—Å–ª—É–≥–∏, 4 - 4. –°–∞–≤–¥–æ / –¢–æ—Ä–≥–æ–≤–ª—è)', (0, 1, 2, 3, 4)) 
                     
    result=""
    if st.button("Predict"):
        result=int(predict_note_authentication(Age, Issue_amount_nominal, Term, Age_full_years, Family_status, Type_of_client, Education, Tupe_of_business)) 
     #st.success('The output is {}'.format(result))
    st.success('Scoring system result is(1 - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–º–æ–π –¥–æ–ª–≥–æ–π –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ > 20, 0 - Scoring system result is(1 - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–º–æ–π –¥–æ–ª–≥–æ–π –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ <= 20) {}'.format(result))
                     
    
    if st.button("About program"):
        st.text("Bank scoring is an evaluation system used by banks and financial institutions to determine the viability of a client to receive a loan, credit, mortgage or insurance. It comprises a series of economic, demographic and financial data of the person.")
        st.text("Built by Aziz Rasulov")
              
                  
if __name__=='__main__':
    main()

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    